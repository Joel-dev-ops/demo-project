Got it! Let's set up a Bazel workspace for a C++ project that covers all the key concepts from the original list:

Workspace and WORKSPACE file

BUILD files defining libraries, binaries, and tests

External dependencies (we'll use a simple external library, e.g., Abseil C++ from GitHub)

Running build and test commands

Dependency management

Testing with GoogleTest

C++ Bazel Build Setup
Workspace layout:
my_cpp_project/
├── WORKSPACE
├── BUILD
├── src/
│   ├── BUILD
│   ├── math/
│   │   ├── math_lib.cc
│   │   ├── math_lib.h
│   ├── app/
│   │   ├── main.cc
│   ├── math_test/
│   │   ├── math_lib_test.cc

1. WORKSPACE file

We'll pull in Abseil C++ and GoogleTest for external dependencies.

# WORKSPACE

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Abseil C++ external repo
http_archive(
    name = "com_google_absl",
    urls = ["https://github.com/abseil/abseil-cpp/archive/refs/tags/20230808.0.tar.gz"],
    strip_prefix = "abseil-cpp-20230808.0",
    sha256 = "6de3e348b5c251f0a6e2439c19d8d1f39e847c4e41648639c9fbcdb9e324db2d",
)

load("@com_google_absl//bazel:absl_deps.bzl", "absl_deps")
absl_deps()

# GoogleTest external repo
http_archive(
    name = "com_google_googletest",
    urls = ["https://github.com/google/googletest/archive/refs/tags/release-1.15.0.tar.gz"],
    strip_prefix = "googletest-release-1.15.0",
    sha256 = "28cd1912a5f37e1bc2d5eec5055f951ccfa8c6eb77c5d2e58fdbf4a7b0ff9e6e",
)

load("@com_google_googletest//bazel:build_defs.bzl", "gtest_repositories")
gtest_repositories()

2. Top-level BUILD file

Empty or just an alias if you want; can skip.

3. src/BUILD file

Defines:

cc_library for math utilities

cc_binary for the app

cc_test for unit tests using GoogleTest

cc_library(
    name = "math_lib",
    srcs = ["math/math_lib.cc"],
    hdrs = ["math/math_lib.h"],
    deps = [
        "@com_google_absl//absl/strings",
    ],
    visibility = ["//visibility:public"],
)

cc_binary(
    name = "math_app",
    srcs = ["app/main.cc"],
    deps = [
        ":math_lib",
    ],
)

cc_test(
    name = "math_lib_test",
    srcs = ["math_test/math_lib_test.cc"],
    deps = [
        ":math_lib",
        "@com_google_googletest//:gtest_main",
    ],
)

4. C++ source files

math_lib.h

#ifndef MATH_LIB_H_
#define MATH_LIB_H_

#include <string>

namespace math {

std::string getGreeting();

}  // namespace math

#endif  // MATH_LIB_H_


math_lib.cc

#include "math/math_lib.h"

#include "absl/strings/str_cat.h"

namespace math {

std::string getGreeting() {
    return absl::StrCat("Hello", ", Bazel!");
}

}  // namespace math


main.cc

#include <iostream>
#include "math/math_lib.h"

int main() {
    std::cout << math::getGreeting() << std::endl;
    return 0;
}


math_lib_test.cc

#include "math/math_lib.h"
#include "gtest/gtest.h"

TEST(MathLibTest, Greeting) {
    EXPECT_EQ(math::getGreeting(), "Hello, Bazel!");
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}

How to build and test:
bazel build //src:math_app
bazel test //src:math_lib_test

Summary of coverage:
Aspect	Description
Workspace structure	Root with WORKSPACE + src/ subpackage
External dependencies	Abseil (strings) and GoogleTest pulled via http_archive
BUILD files	cc_library, cc_binary, cc_test
Dependency management	app depends on lib, test depends on lib + gtest
Testing	GoogleTest test target
Running builds and tests	bazel build, bazel test commands



How to add Remote Caching to your C++ Bazel project
1. Remote cache overview

Bazel supports remote caching using HTTP(s) endpoints or gRPC. The remote cache stores build outputs, so if a build artifact has been built before on another machine or CI, Bazel can download it instead of rebuilding.

2. Simple setup: Remote cache with HTTP

For demo or simple setups, you can use a remote cache service (like Buildbarn
, bazel-remote
, or some cloud providers).

3. Configure .bazelrc

Create a .bazelrc file in the root directory of your workspace and add caching options. For example:

# .bazelrc

# Enable remote HTTP cache
build --remote_cache=https://your-remote-cache-url.com/cache/

# Optional: If your remote cache requires authentication, set headers
# build --remote_cache_header="Authorization: Bearer your_token_here"

# Show remote cache hits/misses
build --experimental_remote_cache_verbose


Replace https://your-remote-cache-url.com/cache/ with your actual remote cache URL.

4. Using Google Cloud Storage (GCS) as remote cache (example)

If you want to use GCS bucket as a remote cache:

Add to .bazelrc:

build --remote_cache=grpcs://storage.googleapis.com/your-bucket-name
build --google_credentials=/path/to/your/service-account.json
build --experimental_remote_cache_verbose


Make sure the service account has permission to read/write the GCS bucket.

5. Command-line flags (optional)

You can also pass remote caching flags directly in your build/test commands:

bazel build //src:math_app --remote_cache=https://your-remote-cache-url.com/cache/
bazel test //src:math_lib_test --remote_cache=https://your-remote-cache-url.com/cache/

6. Verify caching

To check if remote cache is working, use:

bazel build //src:math_app --remote_cache=https://your-remote-cache-url.com/cache/ --experimental_remote_cache_verbose


You should see logs indicating cache hits or misses.

7. Example .bazelrc for your project
# .bazelrc

# Use remote cache server
build --remote_cache=https://your-remote-cache-url.com/cache/

# Optional: Authentication header if needed
# build --remote_cache_header="Authorization: Bearer <your-token>"

# Show verbose remote cache logs
build --experimental_remote_cache_verbose

# Optional: disable local disk cache if you want only remote cache (not recommended)
# build --noremote_accept_cached=false
