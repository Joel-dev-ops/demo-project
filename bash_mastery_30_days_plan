âœ… 30-Day Bash Mastery Plan
Each day includes a topic, practice task, and optionally a bonus challenge to level up faster.

ðŸ”¹ WEEK 1: Foundations
ðŸ“… Day 1 â€“ Basic Shell Commands
Learn: ls, cd, pwd, mkdir, rm, cp, mv

Task: Create and organize a directory structure for your scripts.

Bonus: Write a script that creates folders for Projects, Logs, and Backups.

ðŸ“… Day 2 â€“ File & Text Handling
Learn: cat, less, more, head, tail, touch

Task: Create and display dummy log files.

Bonus: Tail a file in real time and extract specific log lines.

ðŸ“… Day 3 â€“ Redirection & Pipes
Learn: >, >>, 2>, |, tee

Task: Write a script to log command output and errors.

Bonus: Use tee to save and display output.

ðŸ“… Day 4 â€“ Variables & Arithmetic
Learn: Variables, $(( )), let, expr

Task: Write a script that takes two numbers and returns sum, diff, product.

Bonus: Accept inputs as command-line arguments.

ðŸ“… Day 5 â€“ Conditionals
Learn: if, else, elif, [ ], [[ ]]

Task: Check if a file exists and print its type.

Bonus: Add checks for directory, symlink, and permissions.

ðŸ“… Day 6 â€“ Loops (for, while)
Learn: for, while, until

Task: Loop through files and count lines in each.

Bonus: Use while read to parse a CSV file.

ðŸ“… Day 7 â€“ Functions
Learn: Writing and calling functions in a script.

Task: Create a function to display disk space in human-readable form.

Bonus: Add a logging function used by multiple scripts.

ðŸ”¹ WEEK 2: Real Scripting
ðŸ“… Day 8 â€“ User Input & Arguments
Learn: $1, $2, $@, $#, read

Task: Write a script that greets users by name or prompts for it.

Bonus: Handle missing input gracefully.

ðŸ“… Day 9 â€“ Scheduling with Cron
Learn: crontab, schedule tasks

Task: Write a backup script and schedule it with cron.

Bonus: Send an email after backup completes.

ðŸ“… Day 10 â€“ String Operations
Learn: ${#var}, ${var:offset:length}, string comparison

Task: Create a script to parse a filename into name and extension.

Bonus: Add string trimming and upper/lower conversion.

ðŸ“… Day 11 â€“ Arrays & Loops
Learn: arr=(one two three), ${arr[@]}, loop over array

Task: Create an array of services and check their status.

Bonus: Colorize the output for up/down status.

ðŸ“… Day 12 â€“ File I/O
Learn: read, redirection, while read line

Task: Write a script that reads a text file and counts words per line.

Bonus: Output results to a CSV file.

ðŸ“… Day 13 â€“ Error Handling & Debugging
Learn: set -e, set -x, trap, return codes $?

Task: Add error handling to a script.

Bonus: Create a reusable error logger.

ðŸ“… Day 14 â€“ Script Packaging
Learn: Making scripts executable, placing in PATH

Task: Organize your scripts into a project directory and create a README.

Bonus: Add a help section (--help) to one script.

ðŸ”¹ WEEK 3: Advanced Tools & Scripting
ðŸ“… Day 15 â€“ sed Basics
Learn: Search, replace, delete lines

Task: Mask email addresses in a log file.

Bonus: Replace all IPs with [REDACTED].

ðŸ“… Day 16 â€“ awk Basics
Learn: Print columns, conditions, patterns

Task: Extract IPs and response times from a log.

Bonus: Output average response time.

ðŸ“… Day 17 â€“ grep, cut, sort, uniq
Learn: Text filtering and analysis

Task: Find top 5 most frequent errors in a log.

Bonus: Create a reusable log-analyzer script.

ðŸ“… Day 18 â€“ Script Menus
Learn: select, case

Task: Build a menu script for disk info, RAM usage, or uptime.

Bonus: Add ASCII art or colored output.

ðŸ“… Day 19 â€“ getopts for Flags
Learn: Handling options like -h, -f filename

Task: Add flag parsing to your backup script.

Bonus: Handle invalid options gracefully.

ðŸ“… Day 20 â€“ Environment Variables & Exports
Learn: export, .bashrc, .bash_profile

Task: Create your own .bash_aliases and source it.

Bonus: Add a script to set dev environments.

ðŸ“… Day 21 â€“ Shell Script Installer
Task: Write an installer script that:

Copies your scripts to /usr/local/bin

Sets permissions

Adds help info

ðŸ”¹ WEEK 4: Projects, Optimization, Security
ðŸ“… Day 22 â€“ Automation Project Start
Pick a project:

File backup with logging

Log file monitor

Daily report generator

ðŸ“… Day 23 â€“ Bash Script with Logging
Implement logging levels: INFO, WARN, ERROR

ðŸ“… Day 24 â€“ Secure Scripting
Avoid dangerous patterns (eval, rm -rf *)

Add user checks (id, whoami)

ðŸ“… Day 25 â€“ Multi-Script Collaboration
One script calls others as modules (functions or CLI tools)

ðŸ“… Day 26 â€“ Bash and Git
Initialize a Git repo for your scripts

Add README, LICENSE, and .gitignore

ðŸ“… Day 27 â€“ ShellCheck and Linting
Use shellcheck.net or install locally

Fix all warnings in a few scripts

ðŸ“… Day 28 â€“ Performance Tips
Use efficient loops, avoid cat abuse

Compare script speed with time

ðŸ“… Day 29 â€“ Final Project Polishing
Add help text, logging, error handling, usage examples

ðŸ“… Day 30 â€“ Share & Document
Write a blog post or README about your project

Push to GitHub or share with your team

ðŸ›  Tools & Resources
ShellCheck: https://www.shellcheck.net/

ExplainShell: https://explainshell.com/

Bash Manual: man bash

GitHub inspiration: Search bash scripts repositories

